/* START */

// Scene sizes
var WIDTH							= window.innerWidth,
	HEIGHT							= window.innerHeight;

// Camera settings
var ASPECT							= WIDTH / HEIGHT,
	VIEW_ANGLE						= 45,
	NEAR							= 0.1,
	FAR								= 1000;

// Global rendering variables
var renderer, camera, scene;
var objects							= [],
	reflectionCams					= [];

// Initialise stuff
function init() {
	// Rendering settings
	renderer							= new THREE.WebGLRenderer();
	camera								= new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
	scene								= new THREE.Scene();

	// Add camera to the scene
	scene.add(camera);
	camera.position.z					= 5;

	// Start the renderer
	renderer.setSize(WIDTH, HEIGHT);

	// Add the DOM element generated by the renderer to the html body
	document.body.appendChild(renderer.domElement);

	// Sky dome
	var radius							= 100,
		hSegments						= 64,
		vSegments						= 16;
	var vertexShader					= document.getElementById('vertexShader').textContent,
		fragmentShader					= document.getElementById('fragmentShader').textContent;
	var uniforms						= {
											topColor	: {type: "c", value: new THREE.Color( 0x0077ff )},
											bottomColor	: {type: "c", value: new THREE.Color( 0xffffff )},
											offset		: {type: "f", value: 33},
											exponent	: {type: "f", value: 0.6}
										  };
	var geometry						= new THREE.SphereGeometry(radius, hSegments, vSegments);
	var material						= new THREE.ShaderMaterial({vertexShader: vertexShader, fragmentShader: fragmentShader, uniforms: uniforms, side: THREE.BackSide});
	objects['skyDome']					= new THREE.Mesh(geometry, material);
	scene.add(objects['skyDome']);

	// Generate a cube primitive geometry and add it to the scene
	var geometry						= new THREE.CubeGeometry(0.1, 1, 1);
	var material						= new THREE.MeshLambertMaterial({color: 0x00ff00});
	objects['paddle']					= new THREE.Mesh(geometry, material);
//	scene.add(objects['paddle']);

	// Generate a sphere primitive geometry and add it to the scene
	reflectionCams['ball']			= new THREE.CubeCamera(0.1, 5000, 512);
	scene.add(reflectionCams['sphere']);
	var radius							= 0.05,
		hSegments						= 16,
		vSegments						= 16;
	var geometry						= new THREE.SphereGeometry(radius, hSegments, vSegments);
	var material						= new THREE.MeshBasicMaterial({envMap: reflectionCams['ball'].renderTarget});
	objects['ball']					= new THREE.Mesh(geometry, material);
	objects['ball'].position.x		= 1;
	reflectionCams['ball'].position = objects['ball'].position;
	scene.add(objects['ball']);

	// Add a point light
	var pointLight						= new THREE.PointLight(0xffffff);
	pointLight.position.x				= 10;
	pointLight.position.y				= 50;
	pointLight.position.z				= 100;
	scene.add(pointLight);
}

// Animation
function animate() {
	requestAnimationFrame(animate);
	objects['paddle'].rotation.x						+= 0.01;
	objects['paddle'].rotation.y						+= 0.02;
	render();
}

// Rendering
function render() {
	objects['ball'].visible			= false;
	reflectionCams['ball'].updateCubeMap(renderer, scene);
	objects['ball'].visible			= true;
	renderer.render(scene, camera);
}

init();
animate();

/* END */