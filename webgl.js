/* START */

// Scene sizes
var WINDOW_WIDTH							= window.innerWidth,
	WINDOW_HEIGHT							= window.innerHeight - 4;

// Camera settings
var ASPECT							= WIDTH / HEIGHT,
	VIEW_ANGLE						= 45,
	NEAR							= 0.1,
	FAR								= 1000;
ASPECT = 1.7778;
var WIDTH							= WINDOW_WIDTH,
	HEIGHT							= WIDTH / ASPECT;

// Global rendering variables
var renderer, camera, scene;
var objects							= [];

// Initialise stuff
function init() {
	// Rendering settings
	renderer							= new THREE.WebGLRenderer();
	camera								= new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
	scene								= new THREE.Scene();

	// Add camera to the scene
	scene.add(camera);
	camera.position.y					= 1;
	camera.position.z					= 5;

	// Set renderer size
	renderer.setSize(WIDTH, HEIGHT);

	// Add the DOM element generated by the renderer to the html body
	document.body.appendChild(renderer.domElement);

	initLights();
	initObjects();

//	window.addEventListener('resize', onWindowResize, false);
}

function initLights() {
	// Point light
	var pointLight						= new THREE.PointLight(0xffffff);
	pointLight.position.x				= 0;
	pointLight.position.y				= 1;
	pointLight.position.z				= 3;
	scene.add(pointLight);
}

function initObjects() {
	// Sky dome
	var radius							= 100,
		hSegments						= 64,
		vSegments						= 16;
	var vertexShader					= document.getElementById('vertexShader').textContent,
		fragmentShader					= document.getElementById('fragmentShader').textContent;
	var uniforms						= {
		topColor	: {type: "c", value: new THREE.Color( 0x0077ff )},
		bottomColor	: {type: "c", value: new THREE.Color( 0xffffff )},
		offset		: {type: "f", value: 33},
		exponent	: {type: "f", value: 0.6}
	};
	var geometry						= new THREE.SphereGeometry(radius, hSegments, vSegments);
	var material						= new THREE.ShaderMaterial({vertexShader: vertexShader, fragmentShader: fragmentShader, uniforms: uniforms, side: THREE.BackSide});
	objects['skyDome']					= new THREE.Mesh(geometry, material);
	scene.add(objects['skyDome']);

//	initBricks();
	initNewBricks();

	initBalls();

	initPaddles();

	initWalls();
}


// Paddles
function initWalls() {
	drawWalls();
}

function drawWalls() {
	var width							= 7.2,
		height							= 4,
		breadth							= 2,
		startPosX						= 0,
		startPosY						= 1;

	objects['walls']					= [];

	var wallsObj						= new Walls(startPosX, startPosY, width, height, breadth);
	wallsObj.draw();
	objects['walls'].push(wallsObj);
}

function Walls(startPosX, startPosY, width, height, breadth) {

	this.draw = function() {
		this.geometry						= new THREE.CubeGeometry(width, height, breadth);
		this.material						= new THREE.MeshLambertMaterial({color: 0x449911, side: THREE.BackSide});
		this.mesh							= new THREE.Mesh(this.geometry, this.material);
		this.mesh.position.set(startPosX, startPosY, 0);
		scene.add(this.mesh);
	}
}





// Paddles
function initPaddles() {
	drawPaddles();
}

function drawPaddles() {
	var width							= 0.5,
		height							= 0.02,
		breadth							= 0.2,
		startPosX						= 0,
		startPosY						= 0;

	objects['paddles']					= [];

	var paddleObj						= new Paddle(startPosX, startPosY, width, height, breadth);
	paddleObj.draw();
	objects['paddles'].push(paddleObj);
}

function Paddle(startPosX, startPosY, width, height, breadth) {

	this.draw = function() {
		this.geometry						= new THREE.CubeGeometry(width, height, breadth);
		this.material						= new THREE.MeshPhongMaterial({color: 0xffaa55});
		this.mesh							= new THREE.Mesh(this.geometry, this.material);
		this.mesh.position.set(startPosX, startPosY, 0);
		scene.add(this.mesh);
	}
}

// Balls
function initBalls() {
	drawBalls();
}

function drawBalls() {
	var radius							= 0.05,
		hSegments						= 16,
		vSegments						= 16,
		startPosX						= 0,
		startPosY						= 0.75;

	objects['balls']					= [];

	var ballObj							= new Ball(radius, startPosX, startPosY, hSegments, vSegments);
	ballObj.draw();
	objects['balls'].push(ballObj);
}

function Ball(radius, startPosX, startPosY, hSegments, vSegments) {
	this.velX							= 0.05;
	this.velY							= 0.05;

	this.draw = function() {
		this.geometry					= new THREE.SphereGeometry(radius, hSegments, vSegments);
		this.material					= new THREE.MeshPhongMaterial({color: 0xffaa55, specular: 0x888888, shininess: 200});
		this.mesh						= new THREE.Mesh(this.geometry, this.material);
		this.mesh.position.set(startPosX, startPosY, 0);
		scene.add(this.mesh);
	}

	this.move = function() {
		this.mesh.position.x			+= this.velX;
		this.testCollission();
	}

	this.testCollission = function() {
		// Test against walls

		// Test against paddles

		// Test agains bricks
	}
}

// New Bricks
function initNewBricks() {
	var bricks = [];

	// Use 'for' loop if performance is poor
	level[0].levelDesign.forEach(function (row, i) {
		if (row != "") {
			bricks.push(tokenise(row));
		} else {
			bricks.push("");
		}
	});

	drawBricks(bricks);
}

/* This utility function will send back a row in the following format:
row = [
	['', 1],
	['a',3],	// format: 'brick type', length
	...
];
*/
function tokenise(str) {
	var row = [],
		currBrickLen = 1;
	for (i = 0, len = str.length; i < len; i++) {
		if (str[i] == str[i + 1]) {
			currBrickLen++;

		} else {
			currBrickType = str[i];
			var brick = [currBrickType, currBrickLen];
			row.push(brick);
			currBrickLen = 1;
		}
	}
	return row;
}

function drawBricks(bricks) {
	var startTop						= 2.7,
		startLeft						= -3.2,

		gridWidth						= 0.3,
		gridHeight						= 0.15,
		gridBreadth						= 0.2,

		gridPaddingX					= 0.05,		// not needed right now as edge-face rendering is segregating bricks nicely
		gridPaddingY					= 0.01,		// not needed right now as edge-face rendering is segregating bricks nicely

		// to compensate for the fact that the grid's local axes are center aligned to the grid, instead of left and top
		offsetX							= gridWidth / 2,
		offsetY							= gridHeight / 2,

		totalRows						= bricks.count,
		currRow							= 0;

	objects['bricks']					= [];

	bricks.forEach(function(row, i) {

		if (row == "") {
			currRow++;
		} else {
			var localStartLeft			= startLeft,
				posX					= localStartLeft,
				posY					= startTop - (gridHeight * currRow),
				currCol					= 0,
				currBrick				= 0;

			row.forEach(function(brick, j) {
				if (brick[0] != " ") {

					var brickWidth		= (brick[1] * gridWidth),
						brickHeight		= gridHeight,
						brickBreadth	= gridBreadth;

					var offsetX			= brickWidth / 2;
//						posX			= offsetX +  startLeft + (gridWidth * currCol) + (gridPaddingX * currBrick);
						// posX			= posX + offsetX + 0.3;
//						posX			= (posX / 2) + (brickWidth / 2);
						// posX			= posX + brickWidth / 2;
					posX				= localStartLeft + offsetX;

					localStartLeft		= posX + offsetX;

					var brickObj		= new Brick(brick, posX, posY, brickWidth, brickHeight, brickBreadth);
					brickObj.draw();
					objects['bricks'].push(brickObj);

//					currCol				+= brick[1];
//					currBrick++;
				} else {
//					currCol++;

					var blankBrickWidth	= brick[1] * gridWidth;
					var offsetX			= blankBrickWidth / 2;
					posX				= localStartLeft + offsetX
					localStartLeft		= posX + offsetX;
				}
			});
			currRow++;
		}
	});
}

function Brick(brick, posX, posY, brickWidth, brickHeight, brickBreadth) {
	this.type							= brick[0].toLowerCase();
	this.width							= brickWidth;
	this.height							= brickHeight;
	this.breadth						= 0.2;
	this.color							= level[0].brickTypes[this.type];

	this.posXMin						= posX - this.width / 2;
	this.posXMax						= posX + this.width / 2;
	this.posYMin						= posY - this.height / 2;
	this.posYMax						= posY + this.height / 2;

//	console.log(this.posYMin + " : " + posY + " : " + this.posYMax);

	this.draw = function () {
		if (this.type != " ") {
			this.geometry				= new THREE.CubeGeometry(this.width, this.height, this.breadth);

//			this.material				= new THREE.MeshLambertMaterial({color: this.color});
//			this.brickMesh				= new THREE.Mesh(this.geometry, this.material);

			var darkMaterial			= new THREE.MeshLambertMaterial({color: this.color});
			var wireframeMaterial		= new THREE.MeshBasicMaterial({color: 0x000000, wireframe: true, transparent: true});
			var multiMaterial			= [darkMaterial, wireframeMaterial];
			this.mesh					= THREE.SceneUtils.createMultiMaterialObject(this.geometry, multiMaterial);

			// this.geometry.applyMatrix(new THREE.Matrix4().setTranslation(0.3, 0, 0));
//			console.log(posX + " " + posY);
//			console.log(this.color);
			this.mesh.position.set(posX, posY,0 );
			scene.add(this.mesh);
		}
	};
}

// Bricks
/*function initBricks() {
	objects['bricks']					= [];
	var maxLength						= 6.4,
		maxLeft							= -maxLength / 2,
		maxRight						= maxLength / 2,							// currently unused
		maxTop							= 2.7,
		maxBottom						= 0,										// currently unused


		brickLength						= 0.3,
		brickBreadth					= 0.2,
		brickHeight						= 0.15,
		bricksPerCol					= Math.floor(maxLength / brickLength),

		xOffset							= brickLength + 0.01,
		yOffset							= brickHeight + 0.01,
		numBricks						= 53,

		rowOffset						= (maxLength - (brickLength * bricksPerCol)) / 2 + brickLength / 2,

		currX							= maxLeft + rowOffset,
		currY							= maxTop;

	var geometry						= new THREE.CubeGeometry(brickLength, brickHeight, brickBreadth);
	var material						= new THREE.MeshLambertMaterial({color: 0x55ff00});

	for (var i = 0; i < numBricks; i++) {
		var brick = new THREE.Mesh(geometry.clone(), material);

		scene.add(brick);
		if ((i != 0) && (i % bricksPerCol == 0)) {
			var bricksLeft				= numBricks - i;
			if (bricksLeft < bricksPerCol) {
				rowOffset				= (maxLength - (brickLength * bricksLeft)) / 2 + brickLength / 2;
				currX					= maxLeft + rowOffset;
			} else {
				currX					= maxLeft + rowOffset;
			}
			currY						-= yOffset;
		}
		brick.position.set(currX, currY, 0);
		currX							+= xOffset;

		objects['bricks'][i]			= brick;
	}
}*/

// Animation
function animate() {
	requestAnimationFrame(animate);
	update();
	render();
}

function update() {
//	objects['paddles'][0].mesh.rotation.x		+= 0.01;
//	objects['paddles'][0].mesh.rotation.y		+= 0.02;
//	objects['balls'][0].mesh.position.x			+= objects['balls'][0].velX;
	objects['balls'][0].move();
}

// Rendering
function render() {
	renderer.render(scene, camera);
}

init();
animate();

function onWindowResize() {
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();

	renderer.setSize( window.innerWidth, window.innerHeight );
}

/* END */